// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis;
using System.Collections.Generic;
using System.Collections.Immutable;
using System;
using Windows.Foundation.Collections;
using System.Linq;
using System.IO;

namespace CommunityToolkit.AppServices.SourceGenerators.Tests;

[TestClass]
public class Test_SourceGenerators_Codegen
{
    [TestMethod]
    public void UwpHost_ParameterlessMethod()
    {
        string source = """
            using System.Threading.Tasks;
            using CommunityToolkit.AppServices;

            [AppService("MyAppService")]
            interface IMyAppService
            {
                Task FooAsync();
            }
            """;

        string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable
            public sealed class MyAppService : global::CommunityToolkit.AppServices.AppServiceHost, global::IMyAppService
            {
                /// <summary>Creates a new <see cref="MyAppService"/> instance.</summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.AppServices.SourceGenerators.AppServiceGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                public MyAppService() : base("MyAppService")
                {
                }

                /// <inheritdoc/>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.AppServices.SourceGenerators.AppServiceGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                public global::System.Threading.Tasks.Task FooAsync()
                {
                    var request = base.CreateAppServiceRequest();
                    return request.SendAndWaitForResultAsync();
                }
            }
            """;

        VerifyGenerateSources<AppServiceGenerator>(source, OutputKind.WindowsRuntimeApplication, ("IMyAppService.g.cs", result));
    }

    [TestMethod]
    public void UwpHost_MethodWithPrimitiveParameters()
    {
        string source = """
            using System;
            using System.Threading.Tasks;
            using CommunityToolkit.AppServices;

            [AppService("MyAppService")]
            interface IMyAppService
            {
                Task FooAsync(string name, int number, Guid guid, string[] ids, float[] scalars);
            }
            """;

        string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable
            public sealed class MyAppService : global::CommunityToolkit.AppServices.AppServiceHost, global::IMyAppService
            {
                /// <summary>Creates a new <see cref="MyAppService"/> instance.</summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.AppServices.SourceGenerators.AppServiceGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                public MyAppService() : base("MyAppService")
                {
                }

                /// <inheritdoc/>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.AppServices.SourceGenerators.AppServiceGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                public global::System.Threading.Tasks.Task FooAsync(string name, int number, global::System.Guid guid, string[] ids, float[] scalars)
                {
                    var request = base.CreateAppServiceRequest();
                    request = request.WithParameter(name, "name");
                    request = request.WithParameter(number, "number");
                    request = request.WithParameter(guid, "guid");
                    request = request.WithParameter(ids, "ids");
                    request = request.WithParameter(scalars, "scalars");
                    return request.SendAndWaitForResultAsync();
                }
            }
            """;

        VerifyGenerateSources<AppServiceGenerator>(source, OutputKind.WindowsRuntimeApplication, ("IMyAppService.g.cs", result));
    }

    [TestMethod]
    public void UwpHost_MethodWithPrimitiveReturnType()
    {
        string source = """
            using System;
            using System.Threading.Tasks;
            using CommunityToolkit.AppServices;

            [AppService("MyAppService")]
            interface IMyAppService
            {
                Task<string> FooAsync();
            }
            """;

        string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable
            public sealed class MyAppService : global::CommunityToolkit.AppServices.AppServiceHost, global::IMyAppService
            {
                /// <summary>Creates a new <see cref="MyAppService"/> instance.</summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.AppServices.SourceGenerators.AppServiceGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                public MyAppService() : base("MyAppService")
                {
                }

                /// <inheritdoc/>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.AppServices.SourceGenerators.AppServiceGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                public global::System.Threading.Tasks.Task<string> FooAsync()
                {
                    var request = base.CreateAppServiceRequest();
                    return request.SendAndWaitForResultAsync<string>();
                }
            }
            """;

        VerifyGenerateSources<AppServiceGenerator>(source, OutputKind.WindowsRuntimeApplication, ("IMyAppService.g.cs", result));
    }

    [TestMethod]
    public void UwpHost_MethodWithCustomSerializerParameter()
    {
        string source = """
            using System;
            using System.Threading.Tasks;
            using CommunityToolkit.AppServices;

            public class MyClass
            {
                public string Text { get; set; }
            }

            public class MyClassSerializer : IValueSetSerializer<MyClass>
            {
                MyClass? IValueSetSerializer<MyClass>.Deserialize(ValueSet? valueSet)
                {
                    return null;
                }

                ValueSet? IValueSetSerializer<MyClass>.Serialize(MyClass? value)
                {
                    return null;
                }
            }

            [AppService("MyAppService")]
            interface IMyAppService
            {
                Task FooAsync([ValueSetSerializer(typeof(MyClassSerializer))] MyClass myClass);
            }
            """;

        string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable
            public sealed class MyAppService : global::CommunityToolkit.AppServices.AppServiceHost, global::IMyAppService
            {
                /// <summary>Creates a new <see cref="MyAppService"/> instance.</summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.AppServices.SourceGenerators.AppServiceGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                public MyAppService() : base("MyAppService")
                {
                }

                /// <inheritdoc/>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.AppServices.SourceGenerators.AppServiceGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                public global::System.Threading.Tasks.Task FooAsync(global::MyClass myClass)
                {
                    var request = base.CreateAppServiceRequest();
                    request = request.WithParameter(new global::MyClassSerializer(), myClass, "myClass");
                    return request.SendAndWaitForResultAsync();
                }
            }
            """;

        VerifyGenerateSources<AppServiceGenerator>(source, OutputKind.WindowsRuntimeApplication, ("IMyAppService.g.cs", result));
    }

    [TestMethod]
    public void UwpHost_MethodWithCustomSerializerReturnType()
    {
        string source = """
            using System;
            using System.Threading.Tasks;
            using CommunityToolkit.AppServices;

            public class MyClass
            {
                public string Text { get; set; }
            }

            public class MyClassSerializer : IValueSetSerializer<MyClass>
            {
                MyClass? IValueSetSerializer<MyClass>.Deserialize(ValueSet? valueSet)
                {
                    return null;
                }

                ValueSet? IValueSetSerializer<MyClass>.Serialize(MyClass? value)
                {
                    return null;
                }
            }

            [AppService("MyAppService")]
            interface IMyAppService
            {
                [return: ValueSetSerializer(typeof(MyClassSerializer))]
                Task<MyClass> FooAsync();
            }
            """;

        string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable
            public sealed class MyAppService : global::CommunityToolkit.AppServices.AppServiceHost, global::IMyAppService
            {
                /// <summary>Creates a new <see cref="MyAppService"/> instance.</summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.AppServices.SourceGenerators.AppServiceGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                public MyAppService() : base("MyAppService")
                {
                }

                /// <inheritdoc/>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.AppServices.SourceGenerators.AppServiceGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                public global::System.Threading.Tasks.Task<global::MyClass> FooAsync()
                {
                    var request = base.CreateAppServiceRequest();
                    return request.SendAndWaitForResultAsync<global::MyClassSerializer, global::MyClass>(new global::MyClassSerializer());
                }
            }
            """;

        VerifyGenerateSources<AppServiceGenerator>(source, OutputKind.WindowsRuntimeApplication, ("IMyAppService.g.cs", result));
    }

    [TestMethod]
    public void UwpHost_MethodWithCancellationToken()
    {
        string source = """
            using System.Threading;
            using System.Threading.Tasks;
            using CommunityToolkit.AppServices;

            [AppService("MyAppService")]
            interface IMyAppService
            {
                Task FooAsync(CancellationToken token);
            }
            """;

        string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable
            public sealed class MyAppService : global::CommunityToolkit.AppServices.AppServiceHost, global::IMyAppService
            {
                /// <summary>Creates a new <see cref="MyAppService"/> instance.</summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.AppServices.SourceGenerators.AppServiceGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                public MyAppService() : base("MyAppService")
                {
                }

                /// <inheritdoc/>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.AppServices.SourceGenerators.AppServiceGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                public global::System.Threading.Tasks.Task FooAsync(global::System.Threading.CancellationToken token)
                {
                    var request = base.CreateAppServiceRequest();
                    request = request.WithCancellationToken(token);
                    return request.SendAndWaitForResultAsync();
                }
            }
            """;

        VerifyGenerateSources<AppServiceGenerator>(source, OutputKind.WindowsRuntimeApplication, ("IMyAppService.g.cs", result));
    }

    [TestMethod]
    public void UwpHost_MethodWithProgress()
    {
        string source = """
            using System;
            using System.Threading.Tasks;
            using CommunityToolkit.AppServices;

            [AppService("MyAppService")]
            interface IMyAppService
            {
                Task FooAsync(IProgress<string> progress);
            }
            """;

        string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable
            public sealed class MyAppService : global::CommunityToolkit.AppServices.AppServiceHost, global::IMyAppService
            {
                /// <summary>Creates a new <see cref="MyAppService"/> instance.</summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.AppServices.SourceGenerators.AppServiceGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                public MyAppService() : base("MyAppService")
                {
                }

                /// <inheritdoc/>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.AppServices.SourceGenerators.AppServiceGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                public global::System.Threading.Tasks.Task FooAsync(global::System.IProgress<string> progress)
                {
                    var request = base.CreateAppServiceRequest();
                    request = request.WithProgress(progress);
                    return request.SendAndWaitForResultAsync();
                }
            }
            """;

        VerifyGenerateSources<AppServiceGenerator>(source, OutputKind.WindowsRuntimeApplication, ("IMyAppService.g.cs", result));
    }

    [TestMethod]
    public void Extension_ParameterlessMethod()
    {
        string source = """
            using System.Threading.Tasks;
            using CommunityToolkit.AppServices;

            [AppService("MyAppService")]
            interface IMyAppService
            {
                Task FooAsync();
            }

            partial class MyAppService : IMyAppService
            {
                public async Task FooAsync()
                {
                }
            }
            """;

        string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable
            partial class MyAppService : global::CommunityToolkit.AppServices.AppServiceComponent
            {
                /// <summary>Creates a new <see cref="MyAppService"/> instance.</summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.AppServices.SourceGenerators.AppServiceGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                public MyAppService() : base("MyAppService")
                {
                    base.RegisterEndpoint(this.FooAsync, "FooAsync");
                }
            }
            """;

        VerifyGenerateSources<AppServiceGenerator>(source, OutputKind.ConsoleApplication, ("MyAppService.g.cs", result));
    }

    [TestMethod]
    public void Extension_MethodWithPrimitiveParameters()
    {
        string source = """
            using System;
            using System.Threading.Tasks;
            using CommunityToolkit.AppServices;

            [AppService("MyAppService")]
            interface IMyAppService
            {
                Task FooAsync(string name, int number, Guid guid, string[] ids, float[] scalars);
            }

            partial class MyAppService : IMyAppService
            {
                public async Task FooAsync(string name, int number, Guid guid, string[] ids, float[] scalars)
                {
                }
            }
            """;

        string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable
            partial class MyAppService : global::CommunityToolkit.AppServices.AppServiceComponent
            {
                /// <summary>Creates a new <see cref="MyAppService"/> instance.</summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.AppServices.SourceGenerators.AppServiceGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                public MyAppService() : base("MyAppService")
                {
                    base.RegisterEndpoint(async parameters =>
                    {
                        parameters.GetParameter(out string name, "name");
                        parameters.GetParameter(out int number, "number");
                        parameters.GetParameter(out global::System.Guid guid, "guid");
                        parameters.GetParameter(out string[] ids, "ids");
                        parameters.GetParameter(out float[] scalars, "scalars");
                        await this.FooAsync(name, number, guid, ids, scalars);
                    }, "FooAsync");
                }
            }
            """;

        VerifyGenerateSources<AppServiceGenerator>(source, OutputKind.ConsoleApplication, ("MyAppService.g.cs", result));
    }

    [TestMethod]
    public void Extension_MethodWithPrimitiveReturnType()
    {
        string source = """
            using System;
            using System.Threading.Tasks;
            using CommunityToolkit.AppServices;

            [AppService("MyAppService")]
            interface IMyAppService
            {
                Task<string> FooAsync();
            }

            partial class MyAppService : IMyAppService
            {
                public async Task<string> FooAsync()
                {
                    return "";
                }
            }
            """;

        string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable
            partial class MyAppService : global::CommunityToolkit.AppServices.AppServiceComponent
            {
                /// <summary>Creates a new <see cref="MyAppService"/> instance.</summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.AppServices.SourceGenerators.AppServiceGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                public MyAppService() : base("MyAppService")
                {
                    base.RegisterEndpoint(this.FooAsync, "FooAsync");
                }
            }
            """;

        VerifyGenerateSources<AppServiceGenerator>(source, OutputKind.ConsoleApplication, ("MyAppService.g.cs", result));
    }

    [TestMethod]
    public void Extension_MethodWithCustomSerializerParameter()
    {
        string source = """
            using System;
            using System.Threading.Tasks;
            using CommunityToolkit.AppServices;

            public class MyClass
            {
                public string Text { get; set; }
            }

            public class MyClassSerializer : IValueSetSerializer<MyClass>
            {
                MyClass? IValueSetSerializer<MyClass>.Deserialize(ValueSet? valueSet)
                {
                    return null;
                }

                ValueSet? IValueSetSerializer<MyClass>.Serialize(MyClass? value)
                {
                    return null;
                }
            }

            [AppService("MyAppService")]
            interface IMyAppService
            {
                Task FooAsync([ValueSetSerializer(typeof(MyClassSerializer))] MyClass myClass);
            }

            partial class MyAppService : IMyAppService
            {
                public async Task FooAsync(MyClass myClass)
                {
                }
            }
            """;

        string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable
            partial class MyAppService : global::CommunityToolkit.AppServices.AppServiceComponent
            {
                /// <summary>Creates a new <see cref="MyAppService"/> instance.</summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.AppServices.SourceGenerators.AppServiceGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                public MyAppService() : base("MyAppService")
                {
                    base.RegisterEndpoint(async parameters =>
                    {
                        parameters.GetParameter(new global::MyClassSerializer(), out global::MyClass myClass, "myClass");
                        await this.FooAsync(myClass);
                    }, "FooAsync");
                }
            }
            """;

        VerifyGenerateSources<AppServiceGenerator>(source, OutputKind.ConsoleApplication, ("MyAppService.g.cs", result));
    }

    [TestMethod]
    public void Extension_MethodWithCustomSerializerReturnType()
    {
        string source = """
            using System;
            using System.Threading.Tasks;
            using CommunityToolkit.AppServices;

            public class MyClass
            {
                public string Text { get; set; }
            }

            public class MyClassSerializer : IValueSetSerializer<MyClass>
            {
                MyClass? IValueSetSerializer<MyClass>.Deserialize(ValueSet? valueSet)
                {
                    return null;
                }

                ValueSet? IValueSetSerializer<MyClass>.Serialize(MyClass? value)
                {
                    return null;
                }
            }

            [AppService("MyAppService")]
            interface IMyAppService
            {
                [return: ValueSetSerializer(typeof(MyClassSerializer))]
                Task<MyClass> FooAsync();
            }

            partial class MyAppService : IMyAppService
            {
                public async Task<MyClass> FooAsync(MyClass myClass)
                {
                    return null;
                }
            }
            """;

        string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable
            partial class MyAppService : global::CommunityToolkit.AppServices.AppServiceComponent
            {
                /// <summary>Creates a new <see cref="MyAppService"/> instance.</summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.AppServices.SourceGenerators.AppServiceGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                public MyAppService() : base("MyAppService")
                {
                    base.RegisterEndpoint(new global::MyClassSerializer(), this.FooAsync, "FooAsync");
                }
            }
            """;

        VerifyGenerateSources<AppServiceGenerator>(source, OutputKind.ConsoleApplication, ("MyAppService.g.cs", result));
    }

    [TestMethod]
    public void Extension_MethodWithCancellationToken()
    {
        string source = """
            using System.Threading;
            using System.Threading.Tasks;
            using CommunityToolkit.AppServices;

            [AppService("MyAppService")]
            interface IMyAppService
            {
                Task FooAsync(CancellationToken token);
            }

            partial class MyAppService : IMyAppService
            {
                public async Task FooAsync(CancellationToken token)
                {
                }
            }
            """;

        string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable
            partial class MyAppService : global::CommunityToolkit.AppServices.AppServiceComponent
            {
                /// <summary>Creates a new <see cref="MyAppService"/> instance.</summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.AppServices.SourceGenerators.AppServiceGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                public MyAppService() : base("MyAppService")
                {
                    base.RegisterEndpoint(async parameters =>
                    {
                        parameters.GetCancellationToken(out global::System.Threading.CancellationToken token);
                        await this.FooAsync(token);
                    }, "FooAsync");
                }
            }
            """;

        VerifyGenerateSources<AppServiceGenerator>(source, OutputKind.ConsoleApplication, ("MyAppService.g.cs", result));
    }

    [TestMethod]
    public void Extension_MethodWithProgress()
    {
        string source = """
            using System;
            using System.Threading.Tasks;
            using CommunityToolkit.AppServices;

            [AppService("MyAppService")]
            interface IMyAppService
            {
                Task FooAsync(IProgress<string> progress);
            }

            partial class MyAppService : IMyAppService
            {
                public async Task FooAsync(IProgress<string> progress)
                {
                }
            }
            """;

        string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable
            partial class MyAppService : global::CommunityToolkit.AppServices.AppServiceComponent
            {
                /// <summary>Creates a new <see cref="MyAppService"/> instance.</summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.AppServices.SourceGenerators.AppServiceGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                public MyAppService() : base("MyAppService")
                {
                    base.RegisterEndpoint(async parameters =>
                    {
                        parameters.GetProgress(out global::System.IProgress<string> progress);
                        await this.FooAsync(progress);
                    }, "FooAsync");
                }
            }
            """;

        VerifyGenerateSources<AppServiceGenerator>(source, OutputKind.ConsoleApplication, ("MyAppService.g.cs", result));
    }

    /// <summary>
    /// Generates the requested sources
    /// </summary>
    /// <typeparam name="TGenerator">The type of generator to test.</typeparam>
    /// <param name="source">The input source to process.</param>
    /// <param name="outputKind">The output type to use for generation.</param>
    /// <param name="results">The source files to compare.</param>
    private static void VerifyGenerateSources<TGenerator>(string source, OutputKind outputKind, params (string Filename, string Text)[] results)
        where TGenerator : IIncrementalGenerator, new()
    {
        // Ensure CommunityToolkit.AppServices and Windows.Foundation are loaded
        Type appServicesAttributeType = typeof(AppServiceAttribute);
        Type valueSetType = typeof(ValueSet);

        // Get all assembly references for the loaded assemblies (easy way to pull in all necessary dependencies)
        IEnumerable<MetadataReference> references =
            from assembly in AppDomain.CurrentDomain.GetAssemblies()
            where !assembly.IsDynamic
            let reference = MetadataReference.CreateFromFile(assembly.Location)
            select reference;

        SyntaxTree syntaxTree = CSharpSyntaxTree.ParseText(source, CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp8));

        // Create a syntax tree with the input source
        CSharpCompilation compilation = CSharpCompilation.Create(
            "original",
            new SyntaxTree[] { syntaxTree },
            references,
            new CSharpCompilationOptions(outputKind));

        GeneratorDriver driver = CSharpGeneratorDriver.Create(new TGenerator()).WithUpdatedParseOptions((CSharpParseOptions)syntaxTree.Options);

        // Run all source generators on the input source code
        _ = driver.RunGeneratorsAndUpdateCompilation(compilation, out Compilation outputCompilation, out ImmutableArray<Diagnostic> diagnostics);

        // Ensure that no diagnostics were generated
        CollectionAssert.AreEquivalent(Array.Empty<Diagnostic>(), diagnostics);

        foreach ((string filename, string text) in results)
        {
            string filePath = filename;

            // Update the assembly version using the version from the assembly of the input generators.
            // This allows the tests to not need updates whenever the version of the MVVM Toolkit changes.
            string expectedText = text.Replace("<ASSEMBLY_VERSION>", $"\"{typeof(TGenerator).Assembly.GetName().Version}\"");

            SyntaxTree generatedTree = outputCompilation.SyntaxTrees.Single(tree => Path.GetFileName(tree.FilePath) == filePath);

            Assert.AreEqual(expectedText, generatedTree.ToString());
        }

        GC.KeepAlive(appServicesAttributeType);
        GC.KeepAlive(valueSetType);
    }
}
